{
  "address": "0xc828BAC5a1dfE9dF78Ee6d3564D505F2B7F2c91A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "billboardSetter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBillboard",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newBillboardURL",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "BillboardChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractWhitelistAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractWhitelistRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftsMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amtOwed",
          "type": "uint256"
        }
      ],
      "name": "EpochUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOwed",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalSuccessful",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_tokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "adminAddWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "adminRemoveWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBillboardMessage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newBillboardURL",
          "type": "string"
        }
      ],
      "name": "adminSetBillboardMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFeePercent",
          "type": "uint256"
        }
      ],
      "name": "adminSetProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billboard",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billboardURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "claimShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "claimShareAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decreaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftsMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amtOwed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdjustedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBasePrice",
          "type": "uint256"
        }
      ],
      "name": "setBasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBillboardMessage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newBillboardURL",
          "type": "string"
        }
      ],
      "name": "setBillboard",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setCommonURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDecreaseRate",
          "type": "uint256"
        }
      ],
      "name": "setDecreaseRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newIncreaseRate",
          "type": "uint256"
        }
      ],
      "name": "setIncreaseRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalActiveTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedNFTContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7f439bbb77533afd5a3535d14c54a3e13ef4f5b63e7f0b5aa0987f25900d98f1",
  "receipt": {
    "to": null,
    "from": "0xF0A74cB5d9EB5B593478daae9C48904f80A6E953",
    "contractAddress": "0xc828BAC5a1dfE9dF78Ee6d3564D505F2B7F2c91A",
    "transactionIndex": 3,
    "gasUsed": "3122529",
    "logsBloom": "0x
    "blockHash": "0x0506c57c1dc20196ae470f35fc23b46eb60ae8696c8c18057c75c8436923986c",
    "transactionHash": "0x7f439bbb77533afd5a3535d14c54a3e13ef4f5b63e7f0b5aa0987f25900d98f1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8847473,
        "transactionHash": "0x7f439bbb77533afd5a3535d14c54a3e13ef4f5b63e7f0b5aa0987f25900d98f1",
        "address": "0xc828BAC5a1dfE9dF78Ee6d3564D505F2B7F2c91A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0a74cb5d9eb5b593478daae9c48904f80a6e953"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0506c57c1dc20196ae470f35fc23b46eb60ae8696c8c18057c75c8436923986c"
      }
    ],
    "blockNumber": 8847473,
    "cumulativeGasUsed": "3309353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://adframe.vercel.app/api/nft/"
  ],
  "numDeployments": 6,
  "solcInputHash": "aa78b24337088576b1c2b21982e872d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"billboardSetter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBillboard\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBillboardURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BillboardChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractWhitelistAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractWhitelistRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftsMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtOwed\",\"type\":\"uint256\"}],\"name\":\"EpochUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOwed\",\"type\":\"uint256\"}],\"name\":\"WithdrawalSuccessful\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"adminAddWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"adminRemoveWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBillboardMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newBillboardURL\",\"type\":\"string\"}],\"name\":\"adminSetBillboardMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercent\",\"type\":\"uint256\"}],\"name\":\"adminSetProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billboard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billboardURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"claimShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"claimShareAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftsMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amtOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdjustedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBasePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBillboardMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newBillboardURL\",\"type\":\"string\"}],\"name\":\"setBillboard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setCommonURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDecreaseRate\",\"type\":\"uint256\"}],\"name\":\"setDecreaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newIncreaseRate\",\"type\":\"uint256\"}],\"name\":\"setIncreaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedNFTContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"zherring\",\"events\":{\"BillboardChange(address,string,string,uint256)\":{\"details\":\"Emitted when the billboard message and URL are changed.\",\"params\":{\"billboardSetter\":\"The address that changed the billboard.\",\"newBillboard\":\"The new billboard message.\",\"newBillboardURL\":\"The new URL for the billboard.\",\"value\":\"The value sent with the change, which is used to calculate the protocol fee.\"}},\"EpochUpdated(uint256,uint256,uint256)\":{\"details\":\"Emitted when an epoch is updated.\",\"params\":{\"amtOwed\":\"The amount owed to each NFT owner in the updated epoch.\",\"epochIndex\":\"The index of the updated epoch.\",\"nftsMinted\":\"The number of NFTs minted in the updated epoch.\"}},\"WithdrawalSuccessful(uint256,uint256,uint256)\":{\"details\":\"Emitted when a withdrawal is successful.\",\"params\":{\"amountOwed\":\"The amount withdrawn by the NFT owner.\",\"epochNumber\":\"The epoch number for which the withdrawal was made.\",\"nftId\":\"The ID of the NFT for which the withdrawal was made.\"}}},\"kind\":\"dev\",\"methods\":{\"adminAddWhitelist(address)\":{\"details\":\"Adds an NFT contract address to the whitelist, allowing tokens from this contract to be used for minting in the AdFrame contract. Only the owner of the AdFrame contract can add contracts to the whitelist. Emits a `ContractWhitelisted` event upon successfully adding a contract to the whitelist. Requirements: - The caller must be the owner of the AdFrame contract.\",\"params\":{\"_contract\":\"The address of the NFT contract to add to the whitelist.\"}},\"adminRemoveWhitelist(address)\":{\"details\":\"Removes an NFT contract address from the whitelist, preventing tokens from this contract from being used for minting in the AdFrame contract. Only the owner of the AdFrame contract can remove contracts from the whitelist. Emits a `ContractRemovedFromWhitelist` event upon successfully removing a contract from the whitelist. Requirements: - The caller must be the owner of the AdFrame contract.\",\"params\":{\"_contract\":\"The address of the NFT contract to remove from the whitelist.\"}},\"adminSetBillboardMessage(string,string)\":{\"details\":\"Function to allow the owner to change the billboard message. Message is optional, otherwise it defaults to start message. In case of spam or harmful messages!\",\"params\":{\"_newBillboardMessage\":\"The new message to set on the billboard.\",\"_newBillboardURL\":\"The new URL to set on the billboard.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"allows user to burn the billboard. Adjusts the activeTokens count so accurate shares are recorded for future epochs.\",\"params\":{\"tokenId\":\"is token to be burned\"}},\"claimShare(uint256,uint256)\":{\"details\":\"Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement for a specific epoch. This function checks that the caller is the owner of the NFT, the epoch number is valid, and the share for the given epoch has not already been claimed. It then calculates the amount owed based on the revenue generated during the specified epoch and transfers this amount to the NFT owner. Requirements: - The caller must be the owner of the NFT. - The epoch number must be valid and not exceed the current epoch. - The share for the specified epoch and NFT ID must not have already been claimed. - The NFT ID must be eligible for the specified epoch (i.e., it was minted before the epoch ended). - The contract must have a sufficient balance to cover the withdrawal. Emits a `WithdrawalSuccessful` event upon a successful withdrawal.\",\"params\":{\"epochNumber\":\"The epoch number for which the share is being claimed.\",\"nftId\":\"The ID of the NFT for which the share is being claimed.\"}},\"claimShareAll(uint256)\":{\"details\":\"Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement across all epochs in which they have not yet claimed their share. This function iterates through all epochs, checks if the NFT owner has already claimed their share for each epoch, and if not, calculates and accumulates the amount owed to them. Once the total share is calculated, it transfers the accumulated amount to the NFT owner in a single transaction. This function ensures that NFT owners can conveniently claim their revenue share from multiple epochs in one transaction, reducing transaction costs and complexity. Requirements: - The caller must be the owner of the NFT. - The NFT must be eligible for revenue share in the epochs being claimed (i.e., it was minted before the epoch ended). - The contract must have a sufficient balance to cover the total share being claimed. - The NFT must not have already withdrawn the amount! Emits a `WithdrawalSuccessful` event for each epoch from which a share is successfully claimed.\",\"params\":{\"nftId\":\"The ID of the NFT for which the share is being claimed across all eligible epochs.\"}},\"getAdjustedPrice()\":{\"details\":\"Calculates the adjusted price for setting a new billboard message. The adjusted price decreases over time since the last update but cannot fall below the base price. This ensures the price dynamically reflects demand while maintaining a minimum value.\",\"returns\":{\"_0\":\"uint256 The adjusted price for setting a new billboard message.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintNFT(address,uint256)\":{\"details\":\"Mints a new NFT to the caller's address if they do not already own one.  This function is designed to ensure that each address can only mint one NFT to participate in the billboard advertisement revenue sharing.  Upon minting, the NFT's token ID is incremented, and the active token count is updated to reflect the new total.  Additionally, the price for the next billboard message update is increased by the specified increase rate to adjust for the new NFT minted. Requirements: - The caller must not already own an NFT minted by this contract to prevent Sybil attacks and ensure fair distribution. - The NFT contract must be whitelisted to mint NFTs from. - The token ID must not have already been used to mint an NFT. - The caller must own the token in the specified NFT contract. - The token must not have already been used to mint an NFT. Emits a `Transfer` event as defined in the ERC721 standard, indicating the minting of a new NFT to the caller's address. Note: The function includes a safeguard against Sybil attacks by limiting minting to one NFT per address. However, this measure may not fully prevent determined attackers from circumventing the restriction through the use of multiple addresses.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBasePrice(uint256)\":{\"details\":\"Allows the admin to set a new base price (e.g, lowest possible price to charge for the adspace)\",\"params\":{\"_newBasePrice\":\"The new base price to be set.\"}},\"setBillboard(string,string)\":{\"details\":\"Function that allows anyone to change the state variable \\\"billboard\\\" and billboardURL of the contract.\",\"params\":{\"_newBillboardMessage\":\"(string memory) - new billboard message to save on the contract\",\"_newBillboardURL\":\"(string memory) - not required\"}},\"setDecreaseRate(uint256)\":{\"details\":\"Allows the admin to set a new decrease rate. Decrease rate is applied every block to AdjustedPrice.\",\"params\":{\"_newDecreaseRate\":\"The new decrease rate to be set.\"}},\"setIncreaseRate(uint256)\":{\"details\":\"Allows the admin to set a new increase rate. Increase rate is applied upon updateBillboard and mintNFT\",\"params\":{\"_newIncreaseRate\":\"The new increase rate to be set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token. Reverts if the token ID does not exist. May return an empty string. This function is a required override of ERC721's `tokenURI` function.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query.\"},\"returns\":{\"_0\":\"string memory URI for the token.\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawProtocolFees()\":{\"details\":\"Withdraws the accumulated protocol fees to the contract owner's address. This function can only be called by the contract owner. It transfers the total accumulated protocol fees to the owner and resets the protocol revenue to zero.  Emits a `Transfer` event if the transfer is successful. Requirements: - Can only be called by the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdrawProtocolFees()\":{\"notice\":\"Use this function to withdraw the accumulated protocol fees to the owner's address.\"}},\"notice\":\"A simple billboard smartcontract, where a message state variable is for sale! Folks who mint the NFT  opt in to be advertised to, and so are entitled to a cut from the ad revenue users will see ads in their wallet, embedded in their app, or posted on social media \\u0179ike Warpcast  TODOS for V2  - Figure out refund for ads that are replaced too quickly that doesn't encourage too much sybling  - \\t- Idea: 10% Protocol Fee paid regardless, small window (1 hour?)  - Figure out some friction for Sybiling audience growth\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdFrame.sol\":\"AdFrame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AdFrame.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\n/**\\n * A simple billboard smartcontract, where a message state variable is for sale! Folks who mint the NFT \\n * opt in to be advertised to, and so are entitled to a cut from the ad revenue\\n * users will see ads in their wallet, embedded in their app, or posted on social media \\u0179ike Warpcast\\n * \\n * TODOS for V2\\n *  - Figure out refund for ads that are replaced too quickly that doesn't encourage too much sybling\\n *  - \\t- Idea: 10% Protocol Fee paid regardless, small window (1 hour?)\\n *  - Figure out some friction for Sybiling audience growth\\n * @author zherring\\n */\\ncontract AdFrame is ERC721Enumerable, Ownable {\\n\\n\\t// state variables\\n\\tuint256 public protocolFee = 10; // percentage protocol takes\\n\\tuint256 public protocolRevenue = 0; // protocol's revenue \\n\\n\\t// Epoch data, where I store the number of NFTs minted (will limit withdraws to NFT ids >= total minted) and the amount paid to track how much they're owed\\n\\tstruct epochData {\\n\\t\\tuint256 nftsMinted;\\n\\t\\tuint256 amtOwed;\\n\\t}\\n\\n\\t// storing epoch data\\n\\tmapping(uint256 => epochData) public epochs;\\n\\tuint256 public currentEpoch = 0;\\n\\n    // Mapping to track whether a specific NFT ID has been withdrawn for a specific epoch\\n\\tmapping(uint256 => mapping(uint256 => bool)) private hasWithdrawn;\\n\\n\\n\\t// NFT variables for creating and tracking NFTs\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter public _tokenIds;\\n\\tCounters.Counter private _activeTokens; // Active (non-burned) token count\\n\\t//// URI for all tokens, unnecessary to have unique URI for each NFT since they all share the same billboard message\\n\\tstring private _commonURI;\\n    // Add this mapping to store URIs for each token\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    // Creating the mint whitelist starting with ownership of NFTs of whitelisted contracts\\n    mapping(address => bool) public whitelistedNFTContracts;\\n    // Mapping from contract address to token ID to boolean for used tokens\\n    mapping(address => mapping(uint256 => bool)) public usedTokens;\\n\\n\\t// Storing NFT withdrawal data\\n\\tmapping(uint256 => uint256[]) private nftIdWithdraws;\\n\\t\\n\\t// Billboard Variables\\n\\tstring public billboard = \\\"This Space for Sale\\\";\\n\\tstring public billboardURL = \\\"https://adframe.xyz\\\";\\n\\tuint256 public basePrice = 270000000000000;\\n\\tuint256 public lastPrice = basePrice;\\n\\tuint256 public lastUpdateTime;\\n\\tuint256 public decreaseRate = 8100000000;\\n\\tuint256 public increaseRate = 22000000000000;\\n\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     *\\n     * Reverts if the token ID does not exist. May return an empty string.\\n     *\\n     * This function is a required override of ERC721's `tokenURI` function.\\n     *\\n     * @param tokenId uint256 ID of the token to query.\\n     * @return string memory URI for the token.\\n     */\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\t\\t\\trequire(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\t\\t\\t// Return the concatenated URI\\n            return string(abi.encodePacked(_commonURI, \\\"/\\\", Strings.toString(tokenId)));\\n    }\\n    /**\\n     * @dev Emitted when the billboard message and URL are changed.\\n     *\\n     * @param billboardSetter The address that changed the billboard.\\n     * @param newBillboard The new billboard message.\\n     * @param newBillboardURL The new URL for the billboard.\\n     * @param value The value sent with the change, which is used to calculate the protocol fee.\\n     */\\n\\tevent BillboardChange(\\n\\t\\taddress indexed billboardSetter,\\n\\t\\tstring newBillboard,\\n\\t\\tstring newBillboardURL,\\n\\t\\tuint256 value\\n\\t);\\n\\n    event ContractWhitelistAdd(address indexed contractAddress);\\n    event ContractWhitelistRemove(address indexed contractAddress);\\n\\n    /**\\n     * @dev Emitted when a withdrawal is successful.\\n     *\\n     * @param epochNumber The epoch number for which the withdrawal was made.\\n     * @param nftId The ID of the NFT for which the withdrawal was made.\\n     * @param amountOwed The amount withdrawn by the NFT owner.\\n     */\\n    event WithdrawalSuccessful(uint256 indexed epochNumber, uint256 indexed nftId, uint256 amountOwed);\\n    /**\\n     * @dev Emitted when an epoch is updated.\\n     *\\n     * @param epochIndex The index of the updated epoch.\\n     * @param nftsMinted The number of NFTs minted in the updated epoch.\\n     * @param amtOwed The amount owed to each NFT owner in the updated epoch.\\n     */\\n    event EpochUpdated(uint256 indexed epochIndex, uint256 nftsMinted, uint256 amtOwed);\\n\\n    // initiate the smart contract\\n\\tconstructor(string memory initialURI) ERC721(\\\"AdFrameNFT\\\", \\\"AFNFT\\\") {\\n        lastUpdateTime = block.timestamp;\\n                _commonURI = initialURI;\\n    }\\n\\n\\t/**\\n\\t * @dev Function that allows anyone to change the state variable \\\"billboard\\\" and billboardURL of the contract.\\n\\t *\\n\\t * @param _newBillboardMessage (string memory) - new billboard message to save on the contract\\n\\t * @param _newBillboardURL (string memory) - not required\\n\\t */\\n\\tfunction setBillboard(string memory _newBillboardMessage, string memory _newBillboardURL ) public payable {\\n\\n\\t\\tuint256 adjustedPrice = getAdjustedPrice();\\n\\t\\trequire(msg.value >= adjustedPrice, \\\"Insufficient funds sent\\\");\\n\\n\\n\\t\\t// Change state variables\\n\\t\\tbillboard = _newBillboardMessage;\\n\\t\\tbillboardURL = _newBillboardURL;\\n\\t\\tlastPrice = msg.value + increaseRate;\\n\\t\\tlastUpdateTime = block.timestamp;\\n\\n\\t\\tuint256 fee = msg.value * protocolFee / 100;\\n\\t\\tprotocolRevenue += fee;\\n\\t\\tuint256 remainder = msg.value - fee;\\n\\t\\t// create a new epoch entry\\n\\t\\tcurrentEpoch +=1; // move to next epoch\\n\\n\\t\\t// Calculate the amount owed per active (non-burned) NFT, handling division by zero by setting amtOwed to 0 if no NFTs have been minted\\n        uint256 currentActiveTokens = _activeTokens.current();\\n        // Calculate the amount owed per NFT, handling division by zero by setting amtOwed to 0 if no NFTs have been minted\\n        uint256 amtOwedPerNFT;\\n        if (currentActiveTokens > 0) {\\n            amtOwedPerNFT = remainder / currentActiveTokens;\\n        } else {\\n            amtOwedPerNFT = 0;\\n        }\\n\\n\\t\\t// Store the new epoch data\\n        uint256 totalNFTsMinted = _tokenIds.current();\\n        epochs[currentEpoch] = epochData(totalNFTsMinted, amtOwedPerNFT);\\n\\t\\temit EpochUpdated(currentEpoch, totalNFTsMinted, amtOwedPerNFT);\\n\\t\\t// emit: keyword used to trigger an event\\n\\t\\temit BillboardChange(msg.sender, _newBillboardMessage, _newBillboardURL, msg.value);\\n\\t}\\n\\n    /**\\n     * @dev Calculates the adjusted price for setting a new billboard message.\\n     * The adjusted price decreases over time since the last update but cannot fall below the base price.\\n     * This ensures the price dynamically reflects demand while maintaining a minimum value.\\n     *\\n     * @return uint256 The adjusted price for setting a new billboard message.\\n     */\\n    function getAdjustedPrice() public view returns (uint256) {\\n        // Calculate the time elapsed since the last billboard update\\n        uint256 timeElapsed = block.timestamp - lastUpdateTime;\\n        \\n        // Calculate the amount by which the price should decrease based on the elapsed time\\n        uint256 decreaseAmount = timeElapsed * decreaseRate;\\n        \\n        // Initialize the variable to store the adjusted price\\n        uint256 adjustedPrice;\\n        \\n        // If the last price minus the decrease amount is greater than the base price,\\n        // set the adjusted price to this new value. Otherwise, set it to the base price.\\n        if (lastPrice > decreaseAmount) {\\n            adjustedPrice = lastPrice - decreaseAmount;\\n        } else {\\n            // Ensures the adjusted price does not fall below the base price\\n            adjustedPrice = basePrice;\\n        }\\n\\n        // Return the calculated adjusted price\\n        return adjustedPrice;\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT to the caller's address if they do not already own one. \\n     * This function is designed to ensure that each address can only mint one NFT to participate in the billboard advertisement revenue sharing. \\n     * Upon minting, the NFT's token ID is incremented, and the active token count is updated to reflect the new total. \\n     * Additionally, the price for the next billboard message update is increased by the specified increase rate to adjust for the new NFT minted.\\n     *\\n     * Requirements:\\n     * - The caller must not already own an NFT minted by this contract to prevent Sybil attacks and ensure fair distribution.\\n     * - The NFT contract must be whitelisted to mint NFTs from.\\n     * - The token ID must not have already been used to mint an NFT.\\n     * - The caller must own the token in the specified NFT contract.\\n     * - The token must not have already been used to mint an NFT.\\n     *\\n     * Emits a `Transfer` event as defined in the ERC721 standard, indicating the minting of a new NFT to the caller's address.\\n     *\\n     * Note: The function includes a safeguard against Sybil attacks by limiting minting to one NFT per address. However, this measure may not fully prevent determined attackers from circumventing the restriction through the use of multiple addresses.\\n     */\\n    function mintNFT(address nftContract, uint256 tokenId) public {\\n                // @zherring someone could simply sybil the contract and get around this require statement. It is a medium to High severity issue. \\n                // this is to limit NFT mints to 1 per address \\n                require(balanceOf(msg.sender) == 0, \\\"Address already owns an NFT\\\");\\n\\n        // check if the NFT contract is whitelisted\\n        require(whitelistedNFTContracts[nftContract], \\\"NFT contract is not whitelisted\\\");\\n\\n        // check if the token ID has already been used\\n        require(!usedTokens[nftContract][tokenId], \\\"Token ID has already been used\\\");\\n\\n        IERC721 nft = IERC721(nftContract);\\n\\n        // Verify the caller owns the token in the specified NFT contract\\n        require(nft.ownerOf(tokenId) == msg.sender, \\\"Caller does not own the token\\\");\\n\\n        // Mark the token as used for minting\\n        usedTokens[nftContract][tokenId] = true;\\n\\n        // incrementing token ID\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(msg.sender, newItemId);\\n\\n        // increment active token counter\\n        _activeTokens.increment();\\n\\n        // Adjust the lastPrice by +10 as per requirement\\n        lastPrice += increaseRate;\\n    }\\n    \\n    // @zherring NATSPEC\\n    // Another small issue with this function is that is asks for the epoch number and nftId which are emitted in separate events.\\n    // So the user and/or the dev team will need to listen for and aggregate this data. Alternately you could emit this data in the billboard change event so it is in one place. \\n    // @captnseagraves -- unsure what this would look like. On set billboard it would emit an event with the epoch number and max qualified NFT id? \\n    /**\\n     * @dev Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement for a specific epoch.\\n     * This function checks that the caller is the owner of the NFT, the epoch number is valid, and the share for the given epoch has not already been claimed.\\n     * It then calculates the amount owed based on the revenue generated during the specified epoch and transfers this amount to the NFT owner.\\n     *\\n     * Requirements:\\n     * - The caller must be the owner of the NFT.\\n     * - The epoch number must be valid and not exceed the current epoch.\\n     * - The share for the specified epoch and NFT ID must not have already been claimed.\\n     * - The NFT ID must be eligible for the specified epoch (i.e., it was minted before the epoch ended).\\n     * - The contract must have a sufficient balance to cover the withdrawal.\\n     *\\n     * Emits a `WithdrawalSuccessful` event upon a successful withdrawal.\\n     *\\n     * @param epochNumber The epoch number for which the share is being claimed.\\n     * @param nftId The ID of the NFT for which the share is being claimed.\\n     */\\n\\tfunction claimShare(uint256 epochNumber, uint256 nftId) public {\\n\\t\\t   \\n        require(ownerOf(nftId) == msg.sender, \\\"Caller does not own the NFT\\\"); // Verify the caller owns the NFT\\n        require(epochNumber <= currentEpoch, \\\"Invalid epoch number\\\"); // Ensure the epochNumber is valid\\n        require(!hasWithdrawn[epochNumber][nftId], \\\"Already withdrawn\\\");\\n\\n        // Get the epoch data\\n        epochData storage data = epochs[epochNumber];\\n\\n        // Ensure the NFT ID is within the range for the epoch\\n        require(nftId <= data.nftsMinted, \\\"NFT ID is not eligible for this epoch\\\");\\n\\n        uint256 amountOwed = data.amtOwed; // Calculate the amount owed\\n            require(address(this).balance >= amountOwed, \\\"Insufficient contract balance\\\");\\n\\n        // Mark as withdrawn\\n        hasWithdrawn[epochNumber][nftId] = true;\\n\\n        // Transfer the amount owed to the caller\\n            Address.sendValue(payable(msg.sender), amountOwed);\\n\\n        // Emitting successful withdrawal\\n            emit WithdrawalSuccessful(epochNumber, nftId, amountOwed);                  \\n\\t}\\n    /**\\n     * @dev Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement across all epochs in which they have not yet claimed their share.\\n     * This function iterates through all epochs, checks if the NFT owner has already claimed their share for each epoch, and if not, calculates and accumulates the amount owed to them.\\n     * Once the total share is calculated, it transfers the accumulated amount to the NFT owner in a single transaction.\\n     * This function ensures that NFT owners can conveniently claim their revenue share from multiple epochs in one transaction, reducing transaction costs and complexity.\\n     *\\n     * Requirements:\\n     * - The caller must be the owner of the NFT.\\n     * - The NFT must be eligible for revenue share in the epochs being claimed (i.e., it was minted before the epoch ended).\\n     * - The contract must have a sufficient balance to cover the total share being claimed.\\n     * - The NFT must not have already withdrawn the amount!\\n     *\\n     * Emits a `WithdrawalSuccessful` event for each epoch from which a share is successfully claimed.\\n     *\\n     * @param nftId The ID of the NFT for which the share is being claimed across all eligible epochs.\\n     */\\n\\tfunction claimShareAll(uint256 nftId) public {\\n        require(ownerOf(nftId) == msg.sender, \\\"Caller does not own the NFT\\\");\\n\\n        uint256 totalShare = 0;\\n\\n        for (uint256 epochNumber = 1; epochNumber <= currentEpoch; epochNumber++) {\\n            if (!hasWithdrawn[epochNumber][nftId] && nftId <= epochs[epochNumber].nftsMinted) {\\n                epochData storage data = epochs[epochNumber];\\n\\n                uint256 amountOwed = data.amtOwed;\\n                require(address(this).balance >= amountOwed, \\\"Insufficient contract balance\\\");\\n\\n                // Mark as withdrawn\\n                hasWithdrawn[epochNumber][nftId] = true;\\n\\n                // Accumulate the amount owed\\n                totalShare += amountOwed;\\n\\n                // Emitting successful withdrawal for each epoch\\n                emit WithdrawalSuccessful(epochNumber, nftId, amountOwed);\\n            }\\n        }\\n\\n        // After calculating the total amount owed across all epochs, transfer it in a single transaction\\n        if (totalShare > 0) {\\n            Address.sendValue(payable(msg.sender), totalShare);\\n        }\\n    }\\n    // Allows contract owner to set new URI for NFTs\\n\\tfunction setCommonURI(string memory newURI) public onlyOwner {\\n\\t\\t\\t_commonURI = newURI;\\n\\t}\\n\\n     /**\\n     * @dev Withdraws the accumulated protocol fees to the contract owner's address.\\n     * This function can only be called by the contract owner. It transfers the total accumulated\\n     * protocol fees to the owner and resets the protocol revenue to zero.\\n     * \\n     * Emits a `Transfer` event if the transfer is successful.\\n     *\\n     * Requirements:\\n     * - Can only be called by the contract owner.\\n     *\\n     * @notice Use this function to withdraw the accumulated protocol fees to the owner's address.\\n     */\\n    function withdrawProtocolFees() public onlyOwner {\\n        uint256 amount = protocolRevenue;\\n        protocolRevenue = 0; // Reset the accumulated fees to 0\\n\\n        // Transfer the accumulated fees to the owner\\n        (bool success, ) = payable(owner()).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    /**\\n     * @dev Function to allow the owner to change the billboard message. Message is optional, otherwise it defaults to start message. In case of spam or harmful messages!\\n     * @param _newBillboardMessage The new message to set on the billboard.\\n     * @param _newBillboardURL The new URL to set on the billboard.\\n     */\\n\\t\\tfunction adminSetBillboardMessage(string memory _newBillboardMessage, string memory _newBillboardURL) public onlyOwner {\\n\\t\\t\\t\\tif (bytes(_newBillboardMessage).length == 0) {\\n\\t\\t\\t\\t\\t\\tbillboard = \\\"This Space for Sale\\\"; // Default message\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tbillboard = _newBillboardMessage;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (bytes(_newBillboardURL).length == 0) {\\n\\t\\t\\t\\t\\t\\tbillboardURL = \\\"https://adframe.xyz\\\"; // Default URL\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tbillboardURL = _newBillboardURL;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Optionally, you can emit an event when the billboard message is changed by the admin\\n\\t\\t\\t\\temit BillboardChange(msg.sender, billboard, billboardURL, 0);\\n\\t\\t}\\n\\n\\t\\tfunction adminSetProtocolFee(uint256 _newFeePercent) public onlyOwner {\\n        require(_newFeePercent <= 100, \\\"Fee cannot exceed 100%\\\");\\n        protocolFee = _newFeePercent;\\n    }\\n\\n    /**\\n     * @dev Adds an NFT contract address to the whitelist, allowing tokens from this contract to be used for minting in the AdFrame contract.\\n     * Only the owner of the AdFrame contract can add contracts to the whitelist.\\n     *\\n     * Emits a `ContractWhitelisted` event upon successfully adding a contract to the whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the owner of the AdFrame contract.\\n     *\\n     * @param _contract The address of the NFT contract to add to the whitelist.\\n     */\\n    function adminAddWhitelist(address _contract) public onlyOwner {\\n        whitelistedNFTContracts[_contract] = true;\\n        emit ContractWhitelistAdd(_contract);\\n    }\\n\\n    /**\\n     * @dev Removes an NFT contract address from the whitelist, preventing tokens from this contract from being used for minting in the AdFrame contract.\\n     * Only the owner of the AdFrame contract can remove contracts from the whitelist.\\n     *\\n     * Emits a `ContractRemovedFromWhitelist` event upon successfully removing a contract from the whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the owner of the AdFrame contract.\\n     *\\n     * @param _contract The address of the NFT contract to remove from the whitelist.\\n     */\\n    function adminRemoveWhitelist(address _contract) public onlyOwner {\\n        whitelistedNFTContracts[_contract] = false;\\n        emit ContractWhitelistRemove(_contract);\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set a new base price (e.g, lowest possible price to charge for the adspace)\\n     * @param _newBasePrice The new base price to be set.\\n     */\\n    function setBasePrice(uint256 _newBasePrice) public onlyOwner {\\n        basePrice = _newBasePrice;\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set a new decrease rate. Decrease rate is applied every block to AdjustedPrice.\\n     * @param _newDecreaseRate The new decrease rate to be set.\\n     */\\n    function setDecreaseRate(uint256 _newDecreaseRate) public onlyOwner {\\n        decreaseRate = _newDecreaseRate;\\n    }\\n\\n    /**\\n     * @dev Allows the admin to set a new increase rate. Increase rate is applied upon updateBillboard and mintNFT\\n     * @param _newIncreaseRate The new increase rate to be set.\\n     */\\n    function setIncreaseRate(uint256 _newIncreaseRate) public onlyOwner {\\n        increaseRate = _newIncreaseRate;\\n    }\\n\\n    // Override the _transfer function to prevent transfers\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        revert(\\\"NFTs are non-transferable\\\");\\n    }\\n\\n    /**\\n     * @dev allows user to burn the billboard. Adjusts the activeTokens count so accurate shares are recorded for future epochs.\\n     * @param tokenId is token to be burned\\n     */\\n\\t\\tfunction burn(uint256 tokenId) public {\\n\\t\\t\\trequire(ownerOf(tokenId) == msg.sender, \\\"Caller is not the token owner\\\");\\n\\t\\t\\t_burn(tokenId);\\n\\t\\t\\t_activeTokens.decrement();\\n\\t\\t}\\n\\n    function totalActiveTokens() public view returns (uint256) {\\n        return _activeTokens.current();\\n    }\\n    /**\\n     * @dev If the contract receives ETH, the ETH is split between all NFT owners without resetting the billboard message or the adjusted fee.\\n     * could be a fun way to reward ALL NFT holders!\\n     */\\n    receive() external payable {\\n        // Ensure some ETH is sent\\n        require(msg.value > 0, \\\"No ETH sent\\\");\\n\\n        // Ensure there are NFTs minted before proceeding\\n        uint256 nftsMintedSoFar = _activeTokens.current();\\n        require(nftsMintedSoFar > 0, \\\"No NFTs minted\\\");\\n\\n        // Calculate the protocol fee and the remainder to be distributed\\n        uint256 fee = msg.value * protocolFee / 100;\\n        protocolRevenue += fee;\\n        uint256 remainder = msg.value - fee;\\n\\n        // Create a new epoch entry\\n        currentEpoch += 1; // Move to next epoch\\n\\n        // Calculate the amount owed per NFT\\n        uint256 amtOwedPerNFT = remainder / nftsMintedSoFar;\\n\\n        // Store the new epoch data\\n        uint256 totalNFTsMinted = _tokenIds.current();\\n        epochs[currentEpoch] = epochData(totalNFTsMinted, amtOwedPerNFT);\\n\\n        // Emit an event for the new epoch creation\\n        emit EpochUpdated(currentEpoch, totalNFTsMinted, amtOwedPerNFT);\\n\\t}\\n}\\n\\n\",\"keccak256\":\"0xd7bbf2243371126db246d4e0cfecb662a7af41fdba63c7b15da5f8f4d47a0834\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600a600b556000600c819055600e5560c0604052601360809081527f5468697320537061636520666f722053616c650000000000000000000000000060a0526017906200004d908262000278565b5060408051808201909152601381527f68747470733a2f2f61646672616d652e78797a00000000000000000000000000602082015260189062000091908262000278565b5065f5904616e000601955601954601a556401e2cc3100601c55651402462f6000601d55348015620000c257600080fd5b506040516200359e3803806200359e833981016040819052620000e59162000344565b6040518060400160405280600a8152602001691059119c985b5953919560b21b81525060405180604001604052806005815260200164105193919560da1b815250816000908162000137919062000278565b50600162000146828262000278565b505050620001636200015d6200017d60201b60201c565b62000181565b42601b55601262000175828262000278565b505062000419565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001fe57607f821691505b6020821081036200021f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027357600081815260208120601f850160051c810160208610156200024e5750805b601f850160051c820191505b818110156200026f578281556001016200025a565b5050505b505050565b81516001600160401b03811115620002945762000294620001d3565b620002ac81620002a58454620001e9565b8462000225565b602080601f831160018114620002e45760008415620002cb5750858301515b600019600386901b1c1916600185901b1785556200026f565b600085815260208120601f198616915b828110156200031557888601518255948401946001909101908401620002f4565b5085821015620003345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083850312156200035857600080fd5b82516001600160401b03808211156200037057600080fd5b818501915085601f8301126200038557600080fd5b8151818111156200039a576200039a620001d3565b604051601f8201601f19908116603f01168101908382118183101715620003c557620003c5620001d3565b816040528281528886848701011115620003de57600080fd5b600093505b82841015620004025784840186015181850187015292850192620003e3565b600086848301015280965050505050505092915050565b61317580620004296000396000f3fe6080604052600436106102b25760003560e01c8063715018a611610175578063aa46a400116100dc578063c87b56dd11610095578063de4b32621161006f578063de4b3262146109b3578063e985e9c5146109d3578063ea08629b14610a1c578063f2fde38b14610a2f57600080fd5b8063c87b56dd1461095d578063c8f33c911461097d578063d2ea55921461099357600080fd5b8063aa46a40014610881578063b0e21e8a14610898578063b88d4fde146108ae578063c6b61e4c146108ce578063c7876ea414610917578063c7ba61bc1461092d57600080fd5b8063951e78ee1161012e578063951e78ee146107bc578063959d9fab146107f757806395d89b411461080c57806395fcc0481461082157806396d530e214610841578063a22cb4651461086157600080fd5b8063715018a614610728578063766718081461073d5780637af3816c146107535780637b981541146107695780638795cccb146107895780638da5cb5b1461079e57600080fd5b80633c168eab11610219578063520e6515116101d2578063520e65151461067e57806355fc9893146106935780635e17eb33146106b35780636352211e146106c85780636c126562146106e857806370a082311461070857600080fd5b80633c168eab146105c957806342842e0e146105e957806342966c68146106095780634aa4e57d146106295780634f13b8b91461063e5780634f6ccce71461065e57600080fd5b806323b872dd1161026b57806323b872dd1461051d5780632897183d1461053d5780632a4b122f146105535780632f745c591461056957806339059661146105895780633c168afe146105a957600080fd5b806301ffc9a714610433578063053f14da1461046857806306fdde031461048c578063081812fc146104ae578063095ea7b3146104e657806318160ddd1461050857600080fd5b3661042e57600034116102fa5760405162461bcd60e51b815260206004820152600b60248201526a139bc8115512081cd95b9d60aa1b60448201526064015b60405180910390fd5b600061030560115490565b9050600081116103485760405162461bcd60e51b815260206004820152600e60248201526d139bc81391951cc81b5a5b9d195960921b60448201526064016102f1565b60006064600b543461035a9190612930565b6103649190612947565b905080600c60008282546103789190612969565b909155506000905061038a823461297c565b90506001600e600082825461039f9190612969565b90915550600090506103b18483612947565b905060006103be60105490565b6040805180820182528281526020808201868152600e80546000908152600d8452859020935184559051600190930192909255905482518481529182018690529293507f2df6562a84e8230615692a4ab0f0a5ed8c530ddef1234943bc37aa74646bb876910160405180910390a2005b600080fd5b34801561043f57600080fd5b5061045361044e3660046129a5565b610a4f565b60405190151581526020015b60405180910390f35b34801561047457600080fd5b5061047e601a5481565b60405190815260200161045f565b34801561049857600080fd5b506104a1610a7a565b60405161045f9190612a12565b3480156104ba57600080fd5b506104ce6104c9366004612a25565b610b0c565b6040516001600160a01b03909116815260200161045f565b3480156104f257600080fd5b50610506610501366004612a53565b610b33565b005b34801561051457600080fd5b5060085461047e565b34801561052957600080fd5b50610506610538366004612a7f565b610c48565b34801561054957600080fd5b5061047e601c5481565b34801561055f57600080fd5b5061047e601d5481565b34801561057557600080fd5b5061047e610584366004612a53565b610c79565b34801561059557600080fd5b506105066105a4366004612b6c565b610d0f565b3480156105b557600080fd5b506105066105c4366004612bd0565b610e0b565b3480156105d557600080fd5b506105066105e4366004612a53565b611043565b3480156105f557600080fd5b50610506610604366004612a7f565b6112b8565b34801561061557600080fd5b50610506610624366004612a25565b6112d3565b34801561063557600080fd5b5061047e611349565b34801561064a57600080fd5b50610506610659366004612a25565b61139b565b34801561066a57600080fd5b5061047e610679366004612a25565b6113f2565b34801561068a57600080fd5b5061047e611485565b34801561069f57600080fd5b506105066106ae366004612bf2565b611495565b3480156106bf57600080fd5b506104a16114ad565b3480156106d457600080fd5b506104ce6106e3366004612a25565b61153b565b3480156106f457600080fd5b50610506610703366004612a25565b61159b565b34801561071457600080fd5b5061047e610723366004612c27565b6115a8565b34801561073457600080fd5b5061050661162e565b34801561074957600080fd5b5061047e600e5481565b34801561075f57600080fd5b5061047e600c5481565b34801561077557600080fd5b50610506610784366004612a25565b611642565b34801561079557600080fd5b506105066117e1565b3480156107aa57600080fd5b50600a546001600160a01b03166104ce565b3480156107c857600080fd5b506104536107d7366004612a53565b601560209081526000928352604080842090915290825290205460ff1681565b34801561080357600080fd5b506104a1611899565b34801561081857600080fd5b506104a16118a6565b34801561082d57600080fd5b5061050661083c366004612c27565b6118b5565b34801561084d57600080fd5b5061050661085c366004612a25565b611906565b34801561086d57600080fd5b5061050661087c366004612c44565b611913565b34801561088d57600080fd5b5060105461047e9081565b3480156108a457600080fd5b5061047e600b5481565b3480156108ba57600080fd5b506105066108c9366004612c82565b61191e565b3480156108da57600080fd5b506109026108e9366004612a25565b600d602052600090815260409020805460019091015482565b6040805192835260208301919091520161045f565b34801561092357600080fd5b5061047e60195481565b34801561093957600080fd5b50610453610948366004612c27565b60146020526000908152604090205460ff1681565b34801561096957600080fd5b506104a1610978366004612a25565b611956565b34801561098957600080fd5b5061047e601b5481565b34801561099f57600080fd5b506105066109ae366004612c27565b611a07565b3480156109bf57600080fd5b506105066109ce366004612a25565b611a5b565b3480156109df57600080fd5b506104536109ee366004612d02565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610506610a2a366004612b6c565b611a68565b348015610a3b57600080fd5b50610506610a4a366004612c27565b611c37565b60006001600160e01b0319821663780e9d6360e01b1480610a745750610a7482611cad565b92915050565b606060008054610a8990612d30565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590612d30565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b5050505050905090565b6000610b1782611cfd565b506000908152600460205260409020546001600160a01b031690565b6000610b3e8261153b565b9050806001600160a01b0316836001600160a01b031603610bab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016102f1565b336001600160a01b0382161480610bc75750610bc781336109ee565b610c395760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016102f1565b610c438383611d5c565b505050565b610c523382611dca565b610c6e5760405162461bcd60e51b81526004016102f190612d6a565b610c43838383611e49565b6000610c84836115a8565b8210610ce65760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016102f1565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610d17611e91565b8151600003610d5d576040805180820190915260138152725468697320537061636520666f722053616c6560681b6020820152601790610d579082612e05565b50610d6b565b6017610d698382612e05565b505b8051600003610db157604080518082019091526013815272343a3a38399d1797b0b2333930b6b2973c3cbd60691b6020820152601890610dab9082612e05565b50610dbf565b6018610dbd8282612e05565b505b336001600160a01b03167fc3de0fd922507907f842c767b8f5c8867f70083c0a216ae592befcda1502d9bf601760186000604051610dff93929190612f42565b60405180910390a25050565b33610e158261153b565b6001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f6573206e6f74206f776e20746865204e4654000000000060448201526064016102f1565b600e54821115610eb45760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21032b837b1b410373ab6b132b960611b60448201526064016102f1565b6000828152600f6020908152604080832084845290915290205460ff1615610f125760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b60448201526064016102f1565b6000828152600d602052604090208054821115610f7f5760405162461bcd60e51b815260206004820152602560248201527f4e4654204944206973206e6f7420656c696769626c6520666f722074686973206044820152640cae0dec6d60db1b60648201526084016102f1565b600181015447811115610fd45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102f1565b6000848152600f602090815260408083208684529091529020805460ff191660011790556110023382611eeb565b82847f625f0d536f64b06e1fc7914e3aa5678fc3ff7127caf393cf5c758af6965720848360405161103591815260200190565b60405180910390a350505050565b61104c336115a8565b156110995760405162461bcd60e51b815260206004820152601b60248201527f4164647265737320616c7265616479206f776e7320616e204e4654000000000060448201526064016102f1565b6001600160a01b03821660009081526014602052604090205460ff166111015760405162461bcd60e51b815260206004820152601f60248201527f4e465420636f6e7472616374206973206e6f742077686974656c69737465640060448201526064016102f1565b6001600160a01b038216600090815260156020908152604080832084845290915290205460ff16156111755760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2049442068617320616c7265616479206265656e2075736564000060448201526064016102f1565b6040516331a9108f60e11b815260048101829052829033906001600160a01b03831690636352211e90602401602060405180830381865afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190612f78565b6001600160a01b0316146112385760405162461bcd60e51b815260206004820152601d60248201527f43616c6c657220646f6573206e6f74206f776e2074686520746f6b656e00000060448201526064016102f1565b6001600160a01b03831660009081526015602090815260408083208584529091529020805460ff19166001179055611274601080546001019055565b600061127f60105490565b905061128b3382612004565b611299601180546001019055565b601d54601a60008282546112ad9190612969565b909155505050505050565b610c438383836040518060200160405280600081525061191e565b336112dd8261153b565b6001600160a01b0316146113335760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f742074686520746f6b656e206f776e657200000060448201526064016102f1565b61133c8161219d565b6113466011612240565b50565b600080601b544261135a919061297c565b90506000601c548261136c9190612930565b9050600081601a54111561138f5781601a54611388919061297c565b9050611394565b506019545b9392505050565b6113a3611e91565b60648111156113ed5760405162461bcd60e51b81526020600482015260166024820152754665652063616e6e6f7420657863656564203130302560501b60448201526064016102f1565b600b55565b60006113fd60085490565b82106114605760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016102f1565b6008828154811061147357611473612f95565b90600052602060002001549050919050565b600061149060115490565b905090565b61149d611e91565b60126114a98282612e05565b5050565b601780546114ba90612d30565b80601f01602080910402602001604051908101604052809291908181526020018280546114e690612d30565b80156115335780601f1061150857610100808354040283529160200191611533565b820191906000526020600020905b81548152906001019060200180831161151657829003601f168201915b505050505081565b6000818152600260205260408120546001600160a01b031680610a745760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016102f1565b6115a3611e91565b601c55565b60006001600160a01b0382166116125760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016102f1565b506001600160a01b031660009081526003602052604090205490565b611636611e91565b6116406000612297565b565b3361164c8261153b565b6001600160a01b0316146116a25760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f6573206e6f74206f776e20746865204e4654000000000060448201526064016102f1565b600060015b600e5481116117d0576000818152600f6020908152604080832086845290915290205460ff161580156116e857506000818152600d60205260409020548311155b156117be576000818152600d602052604090206001810154478111156117505760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102f1565b6000838152600f602090815260408083208884529091529020805460ff1916600117905561177e8185612969565b935084837f625f0d536f64b06e1fc7914e3aa5678fc3ff7127caf393cf5c758af696572084836040516117b391815260200190565b60405180910390a350505b806117c881612fab565b9150506116a7565b5080156114a9576114a93382611eeb565b6117e9611e91565b600c805460009182905590611806600a546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114611850576040519150601f19603f3d011682016040523d82523d6000602084013e611855565b606091505b50509050806114a95760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016102f1565b601880546114ba90612d30565b606060018054610a8990612d30565b6118bd611e91565b6001600160a01b038116600081815260146020526040808220805460ff19169055517f04eb5e06ec7abf783bcd3e08914c32dc2970815328df1eda41df4c32c9b69c789190a250565b61190e611e91565b601d55565b6114a93383836122e9565b6119283383611dca565b6119445760405162461bcd60e51b81526004016102f190612d6a565b611950848484846123b7565b50505050565b6000818152600260205260409020546060906001600160a01b03166119d55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016102f1565b60126119e0836123ea565b6040516020016119f1929190612fc4565b6040516020818303038152906040529050919050565b611a0f611e91565b6001600160a01b038116600081815260146020526040808220805460ff19166001179055517f1699bb164a26a3c0846bf2d43e220dbfebf20438e115f3675a17b36c23edd8589190a250565b611a63611e91565b601955565b6000611a72611349565b905080341015611ac45760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e7400000000000000000060448201526064016102f1565b6017611ad08482612e05565b506018611add8382612e05565b50601d54611aeb9034612969565b601a5542601b55600b54600090606490611b059034612930565b611b0f9190612947565b905080600c6000828254611b239190612969565b9091555060009050611b35823461297c565b90506001600e6000828254611b4a9190612969565b909155505060115460008115611b6b57611b648284612947565b9050611b6f565b5060005b6000611b7a60105490565b6040805180820182528281526020808201868152600e80546000908152600d8452859020935184559051600190930192909255905482518481529182018690529293507f2df6562a84e8230615692a4ab0f0a5ed8c530ddef1234943bc37aa74646bb876910160405180910390a2336001600160a01b03167fc3de0fd922507907f842c767b8f5c8867f70083c0a216ae592befcda1502d9bf898934604051611c2593929190613058565b60405180910390a25050505050505050565b611c3f611e91565b6001600160a01b038116611ca45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f1565b61134681612297565b60006001600160e01b031982166380ac58cd60e01b1480611cde57506001600160e01b03198216635b5e139f60e01b145b80610a7457506301ffc9a760e01b6001600160e01b0319831614610a74565b6000818152600260205260409020546001600160a01b03166113465760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016102f1565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d918261153b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611dd68361153b565b9050806001600160a01b0316846001600160a01b03161480611e1d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e415750836001600160a01b0316611e3684610b0c565b6001600160a01b0316145b949350505050565b60405162461bcd60e51b815260206004820152601960248201527f4e46547320617265206e6f6e2d7472616e7366657261626c650000000000000060448201526064016102f1565b600a546001600160a01b031633146116405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f1565b80471015611f3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102f1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611f88576040519150601f19603f3d011682016040523d82523d6000602084013e611f8d565b606091505b5050905080610c435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102f1565b6001600160a01b03821661205a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016102f1565b6000818152600260205260409020546001600160a01b0316156120bf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016102f1565b6120cd60008383600161247d565b6000818152600260205260409020546001600160a01b0316156121325760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016102f1565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006121a88261153b565b90506121b881600084600161247d565b6121c18261153b565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061228f5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016102f1565b600019019055565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361234a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016102f1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123c2848484611e49565b6123ce848484846125b1565b6119505760405162461bcd60e51b81526004016102f19061307d565b606060006123f7836126b2565b600101905060008167ffffffffffffffff81111561241757612417612ac0565b6040519080825280601f01601f191660200182016040528015612441576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461244b57509392505050565b60018111156124ec5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016102f1565b816001600160a01b0385166125485761254381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61256b565b836001600160a01b0316856001600160a01b03161461256b5761256b858261278a565b6001600160a01b0384166125875761258281612827565b6125aa565b846001600160a01b0316846001600160a01b0316146125aa576125aa84826128d6565b5050505050565b60006001600160a01b0384163b156126a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125f59033908990889088906004016130cf565b6020604051808303816000875af1925050508015612630575060408051601f3d908101601f1916820190925261262d9181019061310c565b60015b61268d573d80801561265e576040519150601f19603f3d011682016040523d82523d6000602084013e612663565b606091505b5080516000036126855760405162461bcd60e51b81526004016102f19061307d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e41565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126f15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061271d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061273b57662386f26fc10000830492506010015b6305f5e1008310612753576305f5e100830492506008015b612710831061276757612710830492506004015b60648310612779576064830492506002015b600a8310610a745760010192915050565b60006001612797846115a8565b6127a1919061297c565b6000838152600760205260409020549091508082146127f4576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906128399060019061297c565b6000838152600960205260408120546008805493945090928490811061286157612861612f95565b90600052602060002001549050806008838154811061288257612882612f95565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806128ba576128ba613129565b6001900381819060005260206000200160009055905550505050565b60006128e1836115a8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a7457610a7461291a565b60008261296457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a7457610a7461291a565b81810381811115610a7457610a7461291a565b6001600160e01b03198116811461134657600080fd5b6000602082840312156129b757600080fd5b81356113948161298f565b60005b838110156129dd5781810151838201526020016129c5565b50506000910152565b600081518084526129fe8160208601602086016129c2565b601f01601f19169290920160200192915050565b60208152600061139460208301846129e6565b600060208284031215612a3757600080fd5b5035919050565b6001600160a01b038116811461134657600080fd5b60008060408385031215612a6657600080fd5b8235612a7181612a3e565b946020939093013593505050565b600080600060608486031215612a9457600080fd5b8335612a9f81612a3e565b92506020840135612aaf81612a3e565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612af157612af1612ac0565b604051601f8501601f19908116603f01168101908282118183101715612b1957612b19612ac0565b81604052809350858152868686011115612b3257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b5d57600080fd5b61139483833560208501612ad6565b60008060408385031215612b7f57600080fd5b823567ffffffffffffffff80821115612b9757600080fd5b612ba386838701612b4c565b93506020850135915080821115612bb957600080fd5b50612bc685828601612b4c565b9150509250929050565b60008060408385031215612be357600080fd5b50508035926020909101359150565b600060208284031215612c0457600080fd5b813567ffffffffffffffff811115612c1b57600080fd5b611e4184828501612b4c565b600060208284031215612c3957600080fd5b813561139481612a3e565b60008060408385031215612c5757600080fd5b8235612c6281612a3e565b915060208301358015158114612c7757600080fd5b809150509250929050565b60008060008060808587031215612c9857600080fd5b8435612ca381612a3e565b93506020850135612cb381612a3e565b925060408501359150606085013567ffffffffffffffff811115612cd657600080fd5b8501601f81018713612ce757600080fd5b612cf687823560208401612ad6565b91505092959194509250565b60008060408385031215612d1557600080fd5b8235612d2081612a3e565b91506020830135612c7781612a3e565b600181811c90821680612d4457607f821691505b602082108103612d6457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b601f821115610c4357600081815260208120601f850160051c81016020861015612dde5750805b601f850160051c820191505b81811015612dfd57828155600101612dea565b505050505050565b815167ffffffffffffffff811115612e1f57612e1f612ac0565b612e3381612e2d8454612d30565b84612db7565b602080601f831160018114612e685760008415612e505750858301515b600019600386901b1c1916600185901b178555612dfd565b600085815260208120601f198616915b82811015612e9757888601518255948401946001909101908401612e78565b5085821015612eb55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154612ed281612d30565b808552602060018381168015612eef5760018114612f0957612f37565b60ff1985168884015283151560051b880183019550612f37565b866000528260002060005b85811015612f2f5781548a8201860152908301908401612f14565b890184019650505b505050505092915050565b606081526000612f556060830186612ec5565b8281036020840152612f678186612ec5565b915050826040830152949350505050565b600060208284031215612f8a57600080fd5b815161139481612a3e565b634e487b7160e01b600052603260045260246000fd5b600060018201612fbd57612fbd61291a565b5060010190565b6000808454612fd281612d30565b60018281168015612fea5760018114612fff5761302e565b60ff198416875282151583028701945061302e565b8860005260208060002060005b858110156130255781548a82015290840190820161300c565b50505082870194505b50602f60f81b84528651925061304a8382860160208a016129c2565b919092010195945050505050565b60608152600061306b60608301866129e6565b8281036020840152612f6781866129e6565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613102908301846129e6565b9695505050505050565b60006020828403121561311e57600080fd5b81516113948161298f565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c49be233e827c5099f043d89b2a44248c8ef8d42100fe33d891300d24b3589b364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102b25760003560e01c8063715018a611610175578063aa46a400116100dc578063c87b56dd11610095578063de4b32621161006f578063de4b3262146109b3578063e985e9c5146109d3578063ea08629b14610a1c578063f2fde38b14610a2f57600080fd5b8063c87b56dd1461095d578063c8f33c911461097d578063d2ea55921461099357600080fd5b8063aa46a40014610881578063b0e21e8a14610898578063b88d4fde146108ae578063c6b61e4c146108ce578063c7876ea414610917578063c7ba61bc1461092d57600080fd5b8063951e78ee1161012e578063951e78ee146107bc578063959d9fab146107f757806395d89b411461080c57806395fcc0481461082157806396d530e214610841578063a22cb4651461086157600080fd5b8063715018a614610728578063766718081461073d5780637af3816c146107535780637b981541146107695780638795cccb146107895780638da5cb5b1461079e57600080fd5b80633c168eab11610219578063520e6515116101d2578063520e65151461067e57806355fc9893146106935780635e17eb33146106b35780636352211e146106c85780636c126562146106e857806370a082311461070857600080fd5b80633c168eab146105c957806342842e0e146105e957806342966c68146106095780634aa4e57d146106295780634f13b8b91461063e5780634f6ccce71461065e57600080fd5b806323b872dd1161026b57806323b872dd1461051d5780632897183d1461053d5780632a4b122f146105535780632f745c591461056957806339059661146105895780633c168afe146105a957600080fd5b806301ffc9a714610433578063053f14da1461046857806306fdde031461048c578063081812fc146104ae578063095ea7b3146104e657806318160ddd1461050857600080fd5b3661042e57600034116102fa5760405162461bcd60e51b815260206004820152600b60248201526a139bc8115512081cd95b9d60aa1b60448201526064015b60405180910390fd5b600061030560115490565b9050600081116103485760405162461bcd60e51b815260206004820152600e60248201526d139bc81391951cc81b5a5b9d195960921b60448201526064016102f1565b60006064600b543461035a9190612930565b6103649190612947565b905080600c60008282546103789190612969565b909155506000905061038a823461297c565b90506001600e600082825461039f9190612969565b90915550600090506103b18483612947565b905060006103be60105490565b6040805180820182528281526020808201868152600e80546000908152600d8452859020935184559051600190930192909255905482518481529182018690529293507f2df6562a84e8230615692a4ab0f0a5ed8c530ddef1234943bc37aa74646bb876910160405180910390a2005b600080fd5b34801561043f57600080fd5b5061045361044e3660046129a5565b610a4f565b60405190151581526020015b60405180910390f35b34801561047457600080fd5b5061047e601a5481565b60405190815260200161045f565b34801561049857600080fd5b506104a1610a7a565b60405161045f9190612a12565b3480156104ba57600080fd5b506104ce6104c9366004612a25565b610b0c565b6040516001600160a01b03909116815260200161045f565b3480156104f257600080fd5b50610506610501366004612a53565b610b33565b005b34801561051457600080fd5b5060085461047e565b34801561052957600080fd5b50610506610538366004612a7f565b610c48565b34801561054957600080fd5b5061047e601c5481565b34801561055f57600080fd5b5061047e601d5481565b34801561057557600080fd5b5061047e610584366004612a53565b610c79565b34801561059557600080fd5b506105066105a4366004612b6c565b610d0f565b3480156105b557600080fd5b506105066105c4366004612bd0565b610e0b565b3480156105d557600080fd5b506105066105e4366004612a53565b611043565b3480156105f557600080fd5b50610506610604366004612a7f565b6112b8565b34801561061557600080fd5b50610506610624366004612a25565b6112d3565b34801561063557600080fd5b5061047e611349565b34801561064a57600080fd5b50610506610659366004612a25565b61139b565b34801561066a57600080fd5b5061047e610679366004612a25565b6113f2565b34801561068a57600080fd5b5061047e611485565b34801561069f57600080fd5b506105066106ae366004612bf2565b611495565b3480156106bf57600080fd5b506104a16114ad565b3480156106d457600080fd5b506104ce6106e3366004612a25565b61153b565b3480156106f457600080fd5b50610506610703366004612a25565b61159b565b34801561071457600080fd5b5061047e610723366004612c27565b6115a8565b34801561073457600080fd5b5061050661162e565b34801561074957600080fd5b5061047e600e5481565b34801561075f57600080fd5b5061047e600c5481565b34801561077557600080fd5b50610506610784366004612a25565b611642565b34801561079557600080fd5b506105066117e1565b3480156107aa57600080fd5b50600a546001600160a01b03166104ce565b3480156107c857600080fd5b506104536107d7366004612a53565b601560209081526000928352604080842090915290825290205460ff1681565b34801561080357600080fd5b506104a1611899565b34801561081857600080fd5b506104a16118a6565b34801561082d57600080fd5b5061050661083c366004612c27565b6118b5565b34801561084d57600080fd5b5061050661085c366004612a25565b611906565b34801561086d57600080fd5b5061050661087c366004612c44565b611913565b34801561088d57600080fd5b5060105461047e9081565b3480156108a457600080fd5b5061047e600b5481565b3480156108ba57600080fd5b506105066108c9366004612c82565b61191e565b3480156108da57600080fd5b506109026108e9366004612a25565b600d602052600090815260409020805460019091015482565b6040805192835260208301919091520161045f565b34801561092357600080fd5b5061047e60195481565b34801561093957600080fd5b50610453610948366004612c27565b60146020526000908152604090205460ff1681565b34801561096957600080fd5b506104a1610978366004612a25565b611956565b34801561098957600080fd5b5061047e601b5481565b34801561099f57600080fd5b506105066109ae366004612c27565b611a07565b3480156109bf57600080fd5b506105066109ce366004612a25565b611a5b565b3480156109df57600080fd5b506104536109ee366004612d02565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610506610a2a366004612b6c565b611a68565b348015610a3b57600080fd5b50610506610a4a366004612c27565b611c37565b60006001600160e01b0319821663780e9d6360e01b1480610a745750610a7482611cad565b92915050565b606060008054610a8990612d30565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590612d30565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b5050505050905090565b6000610b1782611cfd565b506000908152600460205260409020546001600160a01b031690565b6000610b3e8261153b565b9050806001600160a01b0316836001600160a01b031603610bab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016102f1565b336001600160a01b0382161480610bc75750610bc781336109ee565b610c395760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016102f1565b610c438383611d5c565b505050565b610c523382611dca565b610c6e5760405162461bcd60e51b81526004016102f190612d6a565b610c43838383611e49565b6000610c84836115a8565b8210610ce65760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016102f1565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610d17611e91565b8151600003610d5d576040805180820190915260138152725468697320537061636520666f722053616c6560681b6020820152601790610d579082612e05565b50610d6b565b6017610d698382612e05565b505b8051600003610db157604080518082019091526013815272343a3a38399d1797b0b2333930b6b2973c3cbd60691b6020820152601890610dab9082612e05565b50610dbf565b6018610dbd8282612e05565b505b336001600160a01b03167fc3de0fd922507907f842c767b8f5c8867f70083c0a216ae592befcda1502d9bf601760186000604051610dff93929190612f42565b60405180910390a25050565b33610e158261153b565b6001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f6573206e6f74206f776e20746865204e4654000000000060448201526064016102f1565b600e54821115610eb45760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b21032b837b1b410373ab6b132b960611b60448201526064016102f1565b6000828152600f6020908152604080832084845290915290205460ff1615610f125760405162461bcd60e51b815260206004820152601160248201527020b63932b0b23c903bb4ba34323930bbb760791b60448201526064016102f1565b6000828152600d602052604090208054821115610f7f5760405162461bcd60e51b815260206004820152602560248201527f4e4654204944206973206e6f7420656c696769626c6520666f722074686973206044820152640cae0dec6d60db1b60648201526084016102f1565b600181015447811115610fd45760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102f1565b6000848152600f602090815260408083208684529091529020805460ff191660011790556110023382611eeb565b82847f625f0d536f64b06e1fc7914e3aa5678fc3ff7127caf393cf5c758af6965720848360405161103591815260200190565b60405180910390a350505050565b61104c336115a8565b156110995760405162461bcd60e51b815260206004820152601b60248201527f4164647265737320616c7265616479206f776e7320616e204e4654000000000060448201526064016102f1565b6001600160a01b03821660009081526014602052604090205460ff166111015760405162461bcd60e51b815260206004820152601f60248201527f4e465420636f6e7472616374206973206e6f742077686974656c69737465640060448201526064016102f1565b6001600160a01b038216600090815260156020908152604080832084845290915290205460ff16156111755760405162461bcd60e51b815260206004820152601e60248201527f546f6b656e2049442068617320616c7265616479206265656e2075736564000060448201526064016102f1565b6040516331a9108f60e11b815260048101829052829033906001600160a01b03831690636352211e90602401602060405180830381865afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190612f78565b6001600160a01b0316146112385760405162461bcd60e51b815260206004820152601d60248201527f43616c6c657220646f6573206e6f74206f776e2074686520746f6b656e00000060448201526064016102f1565b6001600160a01b03831660009081526015602090815260408083208584529091529020805460ff19166001179055611274601080546001019055565b600061127f60105490565b905061128b3382612004565b611299601180546001019055565b601d54601a60008282546112ad9190612969565b909155505050505050565b610c438383836040518060200160405280600081525061191e565b336112dd8261153b565b6001600160a01b0316146113335760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f742074686520746f6b656e206f776e657200000060448201526064016102f1565b61133c8161219d565b6113466011612240565b50565b600080601b544261135a919061297c565b90506000601c548261136c9190612930565b9050600081601a54111561138f5781601a54611388919061297c565b9050611394565b506019545b9392505050565b6113a3611e91565b60648111156113ed5760405162461bcd60e51b81526020600482015260166024820152754665652063616e6e6f7420657863656564203130302560501b60448201526064016102f1565b600b55565b60006113fd60085490565b82106114605760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016102f1565b6008828154811061147357611473612f95565b90600052602060002001549050919050565b600061149060115490565b905090565b61149d611e91565b60126114a98282612e05565b5050565b601780546114ba90612d30565b80601f01602080910402602001604051908101604052809291908181526020018280546114e690612d30565b80156115335780601f1061150857610100808354040283529160200191611533565b820191906000526020600020905b81548152906001019060200180831161151657829003601f168201915b505050505081565b6000818152600260205260408120546001600160a01b031680610a745760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016102f1565b6115a3611e91565b601c55565b60006001600160a01b0382166116125760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016102f1565b506001600160a01b031660009081526003602052604090205490565b611636611e91565b6116406000612297565b565b3361164c8261153b565b6001600160a01b0316146116a25760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f6573206e6f74206f776e20746865204e4654000000000060448201526064016102f1565b600060015b600e5481116117d0576000818152600f6020908152604080832086845290915290205460ff161580156116e857506000818152600d60205260409020548311155b156117be576000818152600d602052604090206001810154478111156117505760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636500000060448201526064016102f1565b6000838152600f602090815260408083208884529091529020805460ff1916600117905561177e8185612969565b935084837f625f0d536f64b06e1fc7914e3aa5678fc3ff7127caf393cf5c758af696572084836040516117b391815260200190565b60405180910390a350505b806117c881612fab565b9150506116a7565b5080156114a9576114a93382611eeb565b6117e9611e91565b600c805460009182905590611806600a546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114611850576040519150601f19603f3d011682016040523d82523d6000602084013e611855565b606091505b50509050806114a95760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016102f1565b601880546114ba90612d30565b606060018054610a8990612d30565b6118bd611e91565b6001600160a01b038116600081815260146020526040808220805460ff19169055517f04eb5e06ec7abf783bcd3e08914c32dc2970815328df1eda41df4c32c9b69c789190a250565b61190e611e91565b601d55565b6114a93383836122e9565b6119283383611dca565b6119445760405162461bcd60e51b81526004016102f190612d6a565b611950848484846123b7565b50505050565b6000818152600260205260409020546060906001600160a01b03166119d55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016102f1565b60126119e0836123ea565b6040516020016119f1929190612fc4565b6040516020818303038152906040529050919050565b611a0f611e91565b6001600160a01b038116600081815260146020526040808220805460ff19166001179055517f1699bb164a26a3c0846bf2d43e220dbfebf20438e115f3675a17b36c23edd8589190a250565b611a63611e91565b601955565b6000611a72611349565b905080341015611ac45760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e7400000000000000000060448201526064016102f1565b6017611ad08482612e05565b506018611add8382612e05565b50601d54611aeb9034612969565b601a5542601b55600b54600090606490611b059034612930565b611b0f9190612947565b905080600c6000828254611b239190612969565b9091555060009050611b35823461297c565b90506001600e6000828254611b4a9190612969565b909155505060115460008115611b6b57611b648284612947565b9050611b6f565b5060005b6000611b7a60105490565b6040805180820182528281526020808201868152600e80546000908152600d8452859020935184559051600190930192909255905482518481529182018690529293507f2df6562a84e8230615692a4ab0f0a5ed8c530ddef1234943bc37aa74646bb876910160405180910390a2336001600160a01b03167fc3de0fd922507907f842c767b8f5c8867f70083c0a216ae592befcda1502d9bf898934604051611c2593929190613058565b60405180910390a25050505050505050565b611c3f611e91565b6001600160a01b038116611ca45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f1565b61134681612297565b60006001600160e01b031982166380ac58cd60e01b1480611cde57506001600160e01b03198216635b5e139f60e01b145b80610a7457506301ffc9a760e01b6001600160e01b0319831614610a74565b6000818152600260205260409020546001600160a01b03166113465760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016102f1565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d918261153b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611dd68361153b565b9050806001600160a01b0316846001600160a01b03161480611e1d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611e415750836001600160a01b0316611e3684610b0c565b6001600160a01b0316145b949350505050565b60405162461bcd60e51b815260206004820152601960248201527f4e46547320617265206e6f6e2d7472616e7366657261626c650000000000000060448201526064016102f1565b600a546001600160a01b031633146116405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f1565b80471015611f3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102f1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611f88576040519150601f19603f3d011682016040523d82523d6000602084013e611f8d565b606091505b5050905080610c435760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102f1565b6001600160a01b03821661205a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016102f1565b6000818152600260205260409020546001600160a01b0316156120bf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016102f1565b6120cd60008383600161247d565b6000818152600260205260409020546001600160a01b0316156121325760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016102f1565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006121a88261153b565b90506121b881600084600161247d565b6121c18261153b565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061228f5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016102f1565b600019019055565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361234a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016102f1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123c2848484611e49565b6123ce848484846125b1565b6119505760405162461bcd60e51b81526004016102f19061307d565b606060006123f7836126b2565b600101905060008167ffffffffffffffff81111561241757612417612ac0565b6040519080825280601f01601f191660200182016040528015612441576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461244b57509392505050565b60018111156124ec5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016102f1565b816001600160a01b0385166125485761254381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61256b565b836001600160a01b0316856001600160a01b03161461256b5761256b858261278a565b6001600160a01b0384166125875761258281612827565b6125aa565b846001600160a01b0316846001600160a01b0316146125aa576125aa84826128d6565b5050505050565b60006001600160a01b0384163b156126a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125f59033908990889088906004016130cf565b6020604051808303816000875af1925050508015612630575060408051601f3d908101601f1916820190925261262d9181019061310c565b60015b61268d573d80801561265e576040519150601f19603f3d011682016040523d82523d6000602084013e612663565b606091505b5080516000036126855760405162461bcd60e51b81526004016102f19061307d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611e41565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126f15772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061271d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061273b57662386f26fc10000830492506010015b6305f5e1008310612753576305f5e100830492506008015b612710831061276757612710830492506004015b60648310612779576064830492506002015b600a8310610a745760010192915050565b60006001612797846115a8565b6127a1919061297c565b6000838152600760205260409020549091508082146127f4576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906128399060019061297c565b6000838152600960205260408120546008805493945090928490811061286157612861612f95565b90600052602060002001549050806008838154811061288257612882612f95565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806128ba576128ba613129565b6001900381819060005260206000200160009055905550505050565b60006128e1836115a8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a7457610a7461291a565b60008261296457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a7457610a7461291a565b81810381811115610a7457610a7461291a565b6001600160e01b03198116811461134657600080fd5b6000602082840312156129b757600080fd5b81356113948161298f565b60005b838110156129dd5781810151838201526020016129c5565b50506000910152565b600081518084526129fe8160208601602086016129c2565b601f01601f19169290920160200192915050565b60208152600061139460208301846129e6565b600060208284031215612a3757600080fd5b5035919050565b6001600160a01b038116811461134657600080fd5b60008060408385031215612a6657600080fd5b8235612a7181612a3e565b946020939093013593505050565b600080600060608486031215612a9457600080fd5b8335612a9f81612a3e565b92506020840135612aaf81612a3e565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612af157612af1612ac0565b604051601f8501601f19908116603f01168101908282118183101715612b1957612b19612ac0565b81604052809350858152868686011115612b3257600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612b5d57600080fd5b61139483833560208501612ad6565b60008060408385031215612b7f57600080fd5b823567ffffffffffffffff80821115612b9757600080fd5b612ba386838701612b4c565b93506020850135915080821115612bb957600080fd5b50612bc685828601612b4c565b9150509250929050565b60008060408385031215612be357600080fd5b50508035926020909101359150565b600060208284031215612c0457600080fd5b813567ffffffffffffffff811115612c1b57600080fd5b611e4184828501612b4c565b600060208284031215612c3957600080fd5b813561139481612a3e565b60008060408385031215612c5757600080fd5b8235612c6281612a3e565b915060208301358015158114612c7757600080fd5b809150509250929050565b60008060008060808587031215612c9857600080fd5b8435612ca381612a3e565b93506020850135612cb381612a3e565b925060408501359150606085013567ffffffffffffffff811115612cd657600080fd5b8501601f81018713612ce757600080fd5b612cf687823560208401612ad6565b91505092959194509250565b60008060408385031215612d1557600080fd5b8235612d2081612a3e565b91506020830135612c7781612a3e565b600181811c90821680612d4457607f821691505b602082108103612d6457634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b601f821115610c4357600081815260208120601f850160051c81016020861015612dde5750805b601f850160051c820191505b81811015612dfd57828155600101612dea565b505050505050565b815167ffffffffffffffff811115612e1f57612e1f612ac0565b612e3381612e2d8454612d30565b84612db7565b602080601f831160018114612e685760008415612e505750858301515b600019600386901b1c1916600185901b178555612dfd565b600085815260208120601f198616915b82811015612e9757888601518255948401946001909101908401612e78565b5085821015612eb55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154612ed281612d30565b808552602060018381168015612eef5760018114612f0957612f37565b60ff1985168884015283151560051b880183019550612f37565b866000528260002060005b85811015612f2f5781548a8201860152908301908401612f14565b890184019650505b505050505092915050565b606081526000612f556060830186612ec5565b8281036020840152612f678186612ec5565b915050826040830152949350505050565b600060208284031215612f8a57600080fd5b815161139481612a3e565b634e487b7160e01b600052603260045260246000fd5b600060018201612fbd57612fbd61291a565b5060010190565b6000808454612fd281612d30565b60018281168015612fea5760018114612fff5761302e565b60ff198416875282151583028701945061302e565b8860005260208060002060005b858110156130255781548a82015290840190820161300c565b50505082870194505b50602f60f81b84528651925061304a8382860160208a016129c2565b919092010195945050505050565b60608152600061306b60608301866129e6565b8281036020840152612f6781866129e6565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613102908301846129e6565b9695505050505050565b60006020828403121561311e57600080fd5b81516113948161298f565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c49be233e827c5099f043d89b2a44248c8ef8d42100fe33d891300d24b3589b364736f6c63430008110033",
  "devdoc": {
    "author": "zherring",
    "events": {
      "BillboardChange(address,string,string,uint256)": {
        "details": "Emitted when the billboard message and URL are changed.",
        "params": {
          "billboardSetter": "The address that changed the billboard.",
          "newBillboard": "The new billboard message.",
          "newBillboardURL": "The new URL for the billboard.",
          "value": "The value sent with the change, which is used to calculate the protocol fee."
        }
      },
      "EpochUpdated(uint256,uint256,uint256)": {
        "details": "Emitted when an epoch is updated.",
        "params": {
          "amtOwed": "The amount owed to each NFT owner in the updated epoch.",
          "epochIndex": "The index of the updated epoch.",
          "nftsMinted": "The number of NFTs minted in the updated epoch."
        }
      },
      "WithdrawalSuccessful(uint256,uint256,uint256)": {
        "details": "Emitted when a withdrawal is successful.",
        "params": {
          "amountOwed": "The amount withdrawn by the NFT owner.",
          "epochNumber": "The epoch number for which the withdrawal was made.",
          "nftId": "The ID of the NFT for which the withdrawal was made."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "adminAddWhitelist(address)": {
        "details": "Adds an NFT contract address to the whitelist, allowing tokens from this contract to be used for minting in the AdFrame contract. Only the owner of the AdFrame contract can add contracts to the whitelist. Emits a `ContractWhitelisted` event upon successfully adding a contract to the whitelist. Requirements: - The caller must be the owner of the AdFrame contract.",
        "params": {
          "_contract": "The address of the NFT contract to add to the whitelist."
        }
      },
      "adminRemoveWhitelist(address)": {
        "details": "Removes an NFT contract address from the whitelist, preventing tokens from this contract from being used for minting in the AdFrame contract. Only the owner of the AdFrame contract can remove contracts from the whitelist. Emits a `ContractRemovedFromWhitelist` event upon successfully removing a contract from the whitelist. Requirements: - The caller must be the owner of the AdFrame contract.",
        "params": {
          "_contract": "The address of the NFT contract to remove from the whitelist."
        }
      },
      "adminSetBillboardMessage(string,string)": {
        "details": "Function to allow the owner to change the billboard message. Message is optional, otherwise it defaults to start message. In case of spam or harmful messages!",
        "params": {
          "_newBillboardMessage": "The new message to set on the billboard.",
          "_newBillboardURL": "The new URL to set on the billboard."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "allows user to burn the billboard. Adjusts the activeTokens count so accurate shares are recorded for future epochs.",
        "params": {
          "tokenId": "is token to be burned"
        }
      },
      "claimShare(uint256,uint256)": {
        "details": "Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement for a specific epoch. This function checks that the caller is the owner of the NFT, the epoch number is valid, and the share for the given epoch has not already been claimed. It then calculates the amount owed based on the revenue generated during the specified epoch and transfers this amount to the NFT owner. Requirements: - The caller must be the owner of the NFT. - The epoch number must be valid and not exceed the current epoch. - The share for the specified epoch and NFT ID must not have already been claimed. - The NFT ID must be eligible for the specified epoch (i.e., it was minted before the epoch ended). - The contract must have a sufficient balance to cover the withdrawal. Emits a `WithdrawalSuccessful` event upon a successful withdrawal.",
        "params": {
          "epochNumber": "The epoch number for which the share is being claimed.",
          "nftId": "The ID of the NFT for which the share is being claimed."
        }
      },
      "claimShareAll(uint256)": {
        "details": "Allows an NFT owner to claim their share of the revenue generated from the billboard advertisement across all epochs in which they have not yet claimed their share. This function iterates through all epochs, checks if the NFT owner has already claimed their share for each epoch, and if not, calculates and accumulates the amount owed to them. Once the total share is calculated, it transfers the accumulated amount to the NFT owner in a single transaction. This function ensures that NFT owners can conveniently claim their revenue share from multiple epochs in one transaction, reducing transaction costs and complexity. Requirements: - The caller must be the owner of the NFT. - The NFT must be eligible for revenue share in the epochs being claimed (i.e., it was minted before the epoch ended). - The contract must have a sufficient balance to cover the total share being claimed. - The NFT must not have already withdrawn the amount! Emits a `WithdrawalSuccessful` event for each epoch from which a share is successfully claimed.",
        "params": {
          "nftId": "The ID of the NFT for which the share is being claimed across all eligible epochs."
        }
      },
      "getAdjustedPrice()": {
        "details": "Calculates the adjusted price for setting a new billboard message. The adjusted price decreases over time since the last update but cannot fall below the base price. This ensures the price dynamically reflects demand while maintaining a minimum value.",
        "returns": {
          "_0": "uint256 The adjusted price for setting a new billboard message."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintNFT(address,uint256)": {
        "details": "Mints a new NFT to the caller's address if they do not already own one.  This function is designed to ensure that each address can only mint one NFT to participate in the billboard advertisement revenue sharing.  Upon minting, the NFT's token ID is incremented, and the active token count is updated to reflect the new total.  Additionally, the price for the next billboard message update is increased by the specified increase rate to adjust for the new NFT minted. Requirements: - The caller must not already own an NFT minted by this contract to prevent Sybil attacks and ensure fair distribution. - The NFT contract must be whitelisted to mint NFTs from. - The token ID must not have already been used to mint an NFT. - The caller must own the token in the specified NFT contract. - The token must not have already been used to mint an NFT. Emits a `Transfer` event as defined in the ERC721 standard, indicating the minting of a new NFT to the caller's address. Note: The function includes a safeguard against Sybil attacks by limiting minting to one NFT per address. However, this measure may not fully prevent determined attackers from circumventing the restriction through the use of multiple addresses."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBasePrice(uint256)": {
        "details": "Allows the admin to set a new base price (e.g, lowest possible price to charge for the adspace)",
        "params": {
          "_newBasePrice": "The new base price to be set."
        }
      },
      "setBillboard(string,string)": {
        "details": "Function that allows anyone to change the state variable \"billboard\" and billboardURL of the contract.",
        "params": {
          "_newBillboardMessage": "(string memory) - new billboard message to save on the contract",
          "_newBillboardURL": "(string memory) - not required"
        }
      },
      "setDecreaseRate(uint256)": {
        "details": "Allows the admin to set a new decrease rate. Decrease rate is applied every block to AdjustedPrice.",
        "params": {
          "_newDecreaseRate": "The new decrease rate to be set."
        }
      },
      "setIncreaseRate(uint256)": {
        "details": "Allows the admin to set a new increase rate. Increase rate is applied upon updateBillboard and mintNFT",
        "params": {
          "_newIncreaseRate": "The new increase rate to be set."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token. Reverts if the token ID does not exist. May return an empty string. This function is a required override of ERC721's `tokenURI` function.",
        "params": {
          "tokenId": "uint256 ID of the token to query."
        },
        "returns": {
          "_0": "string memory URI for the token."
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawProtocolFees()": {
        "details": "Withdraws the accumulated protocol fees to the contract owner's address. This function can only be called by the contract owner. It transfers the total accumulated protocol fees to the owner and resets the protocol revenue to zero.  Emits a `Transfer` event if the transfer is successful. Requirements: - Can only be called by the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdrawProtocolFees()": {
        "notice": "Use this function to withdraw the accumulated protocol fees to the owner's address."
      }
    },
    "notice": "A simple billboard smartcontract, where a message state variable is for sale! Folks who mint the NFT  opt in to be advertised to, and so are entitled to a cut from the ad revenue users will see ads in their wallet, embedded in their app, or posted on social media Źike Warpcast  TODOS for V2  - Figure out refund for ads that are replaced too quickly that doesn't encourage too much sybling  - \t- Idea: 10% Protocol Fee paid regardless, small window (1 hour?)  - Figure out some friction for Sybiling audience growth",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1188,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1192,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1195,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1199,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3102,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "protocolFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3105,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "protocolRevenue",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3115,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "epochs",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(epochData)3110_storage)"
      },
      {
        "astId": 3118,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3124,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "hasWithdrawn",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3131,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(Counter)1943_storage"
      },
      {
        "astId": 3134,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_activeTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(Counter)1943_storage"
      },
      {
        "astId": 3136,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_commonURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 3140,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3144,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "whitelistedNFTContracts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3150,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "usedTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3155,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "nftIdWithdraws",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3158,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "billboard",
        "offset": 0,
        "slot": "23",
        "type": "t_string_storage"
      },
      {
        "astId": 3161,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "billboardURL",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      },
      {
        "astId": 3164,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "basePrice",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 3167,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "lastPrice",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 3169,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 3172,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "decreaseRate",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 3175,
        "contract": "contracts/AdFrame.sol:AdFrame",
        "label": "increaseRate",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(epochData)3110_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AdFrame.epochData)",
        "numberOfBytes": "32",
        "value": "t_struct(epochData)3110_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1943_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1942,
            "contract": "contracts/AdFrame.sol:AdFrame",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(epochData)3110_storage": {
        "encoding": "inplace",
        "label": "struct AdFrame.epochData",
        "members": [
          {
            "astId": 3107,
            "contract": "contracts/AdFrame.sol:AdFrame",
            "label": "nftsMinted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3109,
            "contract": "contracts/AdFrame.sol:AdFrame",
            "label": "amtOwed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}